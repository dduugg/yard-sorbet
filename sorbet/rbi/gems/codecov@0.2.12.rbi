# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `codecov` gem.
# Please instead update this file by running `bin/tapioca gem codecov`.


# source://codecov//lib/codecov.rb#9
class SimpleCov::Formatter::Codecov
  # source://codecov//lib/codecov.rb#99
  def build_params(ci); end

  # source://codecov//lib/codecov.rb#332
  def create_report(report); end

  # source://codecov//lib/codecov.rb#49
  def detect_ci; end

  # source://codecov//lib/codecov.rb#35
  def display_header; end

  # source://codecov//lib/codecov.rb#467
  def format(result, disable_net_blockers = T.unsafe(nil)); end

  # source://codecov//lib/codecov.rb#342
  def gzip_report(report); end

  # source://codecov//lib/codecov.rb#459
  def handle_report_response(report); end

  # source://codecov//lib/codecov.rb#305
  def retry_request(req, https); end

  # source://codecov//lib/codecov.rb#353
  def upload_to_codecov(ci, report); end

  # source://codecov//lib/codecov.rb#437
  def upload_to_v2(url, report, query, query_without_token); end

  # source://codecov//lib/codecov.rb#382
  def upload_to_v4(url, report, query, query_without_token); end

  private

  # Convenience color methods
  #
  # source://codecov//lib/codecov.rb#611
  def black(str); end

  # source://codecov//lib/codecov.rb#506
  def file_network; end

  # Format coverage data for a single file for the Codecov.io API.
  #
  # @param file [SimpleCov::SourceFile] The file to process.
  # @return [Array<nil, Integer>]
  #
  # source://codecov//lib/codecov.rb#560
  def file_to_codecov(file); end

  # source://codecov//lib/codecov.rb#619
  def green(str); end

  # Toggle VCR and WebMock on or off
  #
  # @param switch Toggle switch for Net Blockers.
  # @return [Boolean]
  #
  # source://codecov//lib/codecov.rb#584
  def net_blockers(switch); end

  # source://codecov//lib/codecov.rb#615
  def red(str); end

  # Format SimpleCov coverage data for the Codecov.io API.
  #
  # @param result [SimpleCov::Result] The coverage data to process.
  # @return [Hash]
  #
  # source://codecov//lib/codecov.rb#492
  def result_to_codecov(result); end

  # Format SimpleCov coverage data for the Codecov.io coverage API.
  #
  # @param result [SimpleCov::Result] The coverage data to process.
  # @return [Hash<String, Array>]
  #
  # source://codecov//lib/codecov.rb#538
  def result_to_codecov_coverage(result); end

  # Format SimpleCov coverage data for the Codecov.io messages API.
  #
  # @param result [SimpleCov::Result] The coverage data to process.
  # @return [Hash<String, Hash>]
  #
  # source://codecov//lib/codecov.rb#548
  def result_to_codecov_messages(result); end

  # source://codecov//lib/codecov.rb#500
  def result_to_codecov_report(result); end

  # source://codecov//lib/codecov.rb#576
  def shortened_filename(file); end
end

# source://codecov//lib/codecov.rb#14
SimpleCov::Formatter::Codecov::APPVEYOR = T.let(T.unsafe(nil), String)

# source://codecov//lib/codecov.rb#15
SimpleCov::Formatter::Codecov::AZUREPIPELINES = T.let(T.unsafe(nil), String)

# source://codecov//lib/codecov.rb#16
SimpleCov::Formatter::Codecov::BITBUCKET = T.let(T.unsafe(nil), String)

# source://codecov//lib/codecov.rb#17
SimpleCov::Formatter::Codecov::BITRISE = T.let(T.unsafe(nil), String)

# source://codecov//lib/codecov.rb#18
SimpleCov::Formatter::Codecov::BUILDKITE = T.let(T.unsafe(nil), String)

# source://codecov//lib/codecov.rb#19
SimpleCov::Formatter::Codecov::CIRCLE = T.let(T.unsafe(nil), String)

# source://codecov//lib/codecov.rb#20
SimpleCov::Formatter::Codecov::CODEBUILD = T.let(T.unsafe(nil), String)

# source://codecov//lib/codecov.rb#21
SimpleCov::Formatter::Codecov::CODESHIP = T.let(T.unsafe(nil), String)

# source://codecov//lib/codecov.rb#22
SimpleCov::Formatter::Codecov::DRONEIO = T.let(T.unsafe(nil), String)

# source://codecov//lib/codecov.rb#23
SimpleCov::Formatter::Codecov::GITHUB = T.let(T.unsafe(nil), String)

# source://codecov//lib/codecov.rb#24
SimpleCov::Formatter::Codecov::GITLAB = T.let(T.unsafe(nil), String)

# source://codecov//lib/codecov.rb#25
SimpleCov::Formatter::Codecov::HEROKU = T.let(T.unsafe(nil), String)

# source://codecov//lib/codecov.rb#26
SimpleCov::Formatter::Codecov::JENKINS = T.let(T.unsafe(nil), String)

# CIs
#
# source://codecov//lib/codecov.rb#13
SimpleCov::Formatter::Codecov::RECOGNIZED_CIS = T.let(T.unsafe(nil), Array)

# source://codecov//lib/codecov.rb#27
SimpleCov::Formatter::Codecov::SEMAPHORE = T.let(T.unsafe(nil), String)

# source://codecov//lib/codecov.rb#28
SimpleCov::Formatter::Codecov::SHIPPABLE = T.let(T.unsafe(nil), String)

# source://codecov//lib/codecov.rb#29
SimpleCov::Formatter::Codecov::SOLANO = T.let(T.unsafe(nil), String)

# source://codecov//lib/codecov.rb#30
SimpleCov::Formatter::Codecov::TEAMCITY = T.let(T.unsafe(nil), String)

# source://codecov//lib/codecov.rb#31
SimpleCov::Formatter::Codecov::TRAVIS = T.let(T.unsafe(nil), String)

# source://codecov//lib/codecov.rb#10
SimpleCov::Formatter::Codecov::VERSION = T.let(T.unsafe(nil), String)

# source://codecov//lib/codecov.rb#32
SimpleCov::Formatter::Codecov::WERCKER = T.let(T.unsafe(nil), String)
